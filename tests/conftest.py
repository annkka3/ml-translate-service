import os
import uuid
import pytest
import httpx

# üëâ –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ç–¥–µ–ª—å–Ω—É—é —Ç–µ—Å—Ç–æ–≤—É—é –ë–î (—Ñ–∞–π–ª–∏–∫ SQLite) –∏ —Ñ–ª–∞–≥ TESTING
TEST_DSN = os.getenv("TEST_DATABASE_URL", "sqlite+aiosqlite:///./test.db")
os.environ["DATABASE_URL"] = TEST_DSN
os.environ.setdefault("TESTING", "1")

@pytest.fixture
async def client():
    # 1) –ü–æ–¥–º–µ–Ω—è–µ–º –¥–≤–∏–∂–æ–∫/—Å–µ—Å—Å–∏–∏ –î–û –∏–º–ø–æ—Ä—Ç–∞ FastAPI-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    from sqlalchemy.ext.asyncio import create_async_engine, async_sessionmaker

    import app.infrastructure.db.database as db

    test_engine = create_async_engine(TEST_DSN, future=True, pool_pre_ping=True)
    TestSessionLocal = async_sessionmaker(
        test_engine, expire_on_commit=False, autoflush=False, autocommit=False
    )

    # –ü–æ–¥—Å—Ç–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ engine/session –≤ –º–æ–¥—É–ª—å –ë–î
    db.engine = test_engine
    db.SessionLocal = TestSessionLocal

    # 2) –°–æ–∑–¥–∞—ë–º —Ç–∞–±–ª–∏—Ü—ã (–µ—Å–ª–∏ —Ç–≤–æ–π app –Ω–µ –¥–µ–ª–∞–µ—Ç —ç—Ç–æ —Å–∞–º –Ω–∞ —Å—Ç–∞—Ä—Ç–µ)
    try:
        Base = db.Base  # —á–∞—â–µ –≤—Å–µ–≥–æ Base –¥–æ—Å—Ç—É–ø–µ–Ω —Ç—É—Ç
    except AttributeError:
        # fallback, –µ—Å–ª–∏ Base —Ö—Ä–∞–Ω–∏—Ç—Å—è –≤ –¥—Ä—É–≥–æ–º –º–æ–¥—É–ª–µ
        from app.infrastructure.db.models import Base  # type: ignore

    async with test_engine.begin() as conn:
        await conn.run_sync(Base.metadata.create_all)

    # 3) –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¢–û–õ–¨–ö–û —Ç–µ–ø–µ—Ä—å
    from app.main import app

    # 4) httpx —Å ASGITransport (—Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π —Å–ø–æ—Å–æ–±)
    transport = httpx.ASGITransport(app=app)
    async with httpx.AsyncClient(transport=transport, base_url="http://test") as ac:
        yield ac


async def _register_and_login(client) -> dict:
    email = f"test_{uuid.uuid4().hex[:8]}@example.com"
    password = "P@ssw0rd!"

    r = await client.post("/auth/register", json={"email": email, "password": password})
    assert r.status_code in (200, 201), r.text

    r = await client.post("/auth/login", json={"email": email, "password": password})
    assert r.status_code == 200, r.text

    token = r.json().get("access_token")
    assert token, "–ù–µ –ø–æ–ª—É—á–∏–ª–∏ access_token"
    return {"Authorization": f"Bearer {token}"}


@pytest.fixture
async def auth_headers(client):
    return await _register_and_login(client)
