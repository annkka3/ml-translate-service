import os
import logging
from typing import Tuple, Optional

import httpx
from telegram import Update
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    filters,
    ContextTypes,
)
from dotenv import load_dotenv

load_dotenv()

# --- Telegram ---
TOKEN = os.getenv("TELEGRAM_TOKEN")

# --- –¢–µ–∫—É—â–∏–π –ø–µ—Ä–µ–≤–æ–¥ –ø–æ X-User-Id ---
API_URL = os.getenv("API_URL", "").strip()        # –Ω–∞–ø—Ä–∏–º–µ—Ä: http://127.0.0.1:8080/translate
API_USER_ID = os.getenv("API_USER_ID", "").strip()

# –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º API_URL -> –≤—Å–µ–≥–¥–∞ –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è –Ω–∞ /translate/
if API_URL:
    if "/translate" not in API_URL:
        API_URL = API_URL.rstrip("/") + "/translate/"
    else:
        API_URL = API_URL.rstrip("/") + "/"

# --- –ù–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã (–±–∞–ª–∞–Ω—Å/–æ–ø–µ—Ä–∞—Ü–∏–∏/–ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ) —á–µ—Ä–µ–∑ Bearer JWT ---
API_BASE = os.getenv("API_BASE", "").strip()
API_EMAIL = os.getenv("API_EMAIL", "").strip()
API_PASSWORD = os.getenv("API_PASSWORD", "").strip()

if not API_BASE and API_URL:
    API_BASE = API_URL.split("/translate")[0].rstrip("/")

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ö—ç—à JWT —Ç–æ–∫–µ–Ω–∞
_access_token: Optional[str] = None


def _parse_message(text: str) -> Tuple[str, str, str]:
    """
    –û–∂–∏–¥–∞–µ–º —Ñ–æ—Ä–º–∞—Ç: "—Ç–µ–∫—Å—Ç | source | target"
    –í–æ–∑–≤—Ä–∞—â–∞–µ–º: (text, source, target) –∏–ª–∏ –±—Ä–æ—Å–∞–µ–º ValueError.
    """
    parts = [p.strip() for p in text.split("|")]
    if len(parts) != 3:
        raise ValueError("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü—Ä–∏–º–µ—Ä: Hello world | en | fr")
    msg, src, tgt = parts
    if not msg or not src or not tgt:
        raise ValueError("–ü—É—Å—Ç—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã. –ü—Ä–∏–º–µ—Ä: Hello world | en | fr")
    return msg, src.lower(), tgt.lower()


def _map_tx_type(t: Optional[str]) -> str:
    t = (t or "").lower()
    if t in ("topup", "–ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ"):
        return "–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ"
    if t in ("debit", "—Å–ø–∏—Å–∞–Ω–∏–µ"):
        return "–°–ø–∏—Å–∞–Ω–∏–µ"
    return t or "‚Äî"


async def _ensure_token() -> str:
    global _access_token
    if _access_token:
        return _access_token
    if not (API_BASE and API_EMAIL and API_PASSWORD):
        raise RuntimeError("–î–ª—è –∫–æ–º–∞–Ω–¥ –∫–æ—à–µ–ª—å–∫–∞ –Ω—É–∂–Ω—ã API_BASE, API_EMAIL –∏ API_PASSWORD –≤ .env")

    async with httpx.AsyncClient(base_url=API_BASE, timeout=10.0) as client:
        resp = await client.post("/auth/login", json={"email": API_EMAIL, "password": API_PASSWORD})
        if resp.status_code != 200:
            raise RuntimeError(f"–ù–µ —É–¥–∞–ª–æ—Å—å –≤–æ–π—Ç–∏ —Å–µ—Ä–≤–∏—Å–Ω–æ–π —É—á—ë—Ç–∫–æ–π: {resp.status_code} {resp.text}")
        _access_token = resp.json().get("access_token")
        if not _access_token:
            raise RuntimeError("–í –æ—Ç–≤–µ—Ç–µ /auth/login –Ω–µ—Ç access_token")
        return _access_token


async def _api_get(path: str, params: dict | None = None) -> dict:
    token = await _ensure_token()
    headers = {"Authorization": f"Bearer {token}"}
    async with httpx.AsyncClient(base_url=API_BASE, timeout=10.0, headers=headers) as client:
        resp = await client.get(path, params=params)
        if resp.status_code == 401:
            global _access_token
            _access_token = None
            token = await _ensure_token()
            headers["Authorization"] = f"Bearer {token}"
            resp = await client.get(path, params=params, headers=headers)
        resp.raise_for_status()
        return resp.json()


async def _api_post(path: str, payload: dict) -> dict:
    token = await _ensure_token()
    headers = {"Authorization": f"Bearer {token}"}
    async with httpx.AsyncClient(base_url=API_BASE, timeout=10.0, headers=headers) as client:
        resp = await client.post(path, json=payload)
        if resp.status_code == 401:
            global _access_token
            _access_token = None
            token = await _ensure_token()
            headers["Authorization"] = f"Bearer {token}"
            resp = await client.post(path, json=payload, headers=headers)
        resp.raise_for_status()
        return resp.json()


# -------------------- –ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞ --------------------

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    txt = (
        "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –ø–µ—Ä–µ–≤–æ–¥–∞.\n\n"
        "‚Ä¢ –û—Ç–ø—Ä–∞–≤—å —Ç–µ–∫—Å—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ:  —Ç–µ–∫—Å—Ç | en | fr  ‚Äî –∏ —è –ø–µ—Ä–µ–≤–µ–¥—É.\n"
        "‚Ä¢ –ö–æ–º–∞–Ω–¥—ã –∫–æ—à–µ–ª—å–∫–∞:\n"
        "  /balance ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å –±–∞–ª–∞–Ω—Å\n"
        "  /transactions [N] ‚Äî –ø–æ—Å–ª–µ–¥–Ω–∏–µ N –æ–ø–µ—Ä–∞—Ü–∏–π (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 10)\n"
        "  /topup <amount> ‚Äî –ø–æ–ø–æ–ª–Ω–∏—Ç—å –Ω–∞ —Å—É–º–º—É (—Ü–µ–ª–æ–µ —á–∏—Å–ª–æ)\n"
    )
    await update.message.reply_text(txt)


async def help_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await start(update, context)


async def translate_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not API_URL:
        await update.message.reply_text("–ù–µ –∑–∞–¥–∞–Ω API_URL –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è.")
        return
    if not API_USER_ID:
        await update.message.reply_text("–ù–µ –∑–∞–¥–∞–Ω API_USER_ID –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è.")
        return

    try:
        text, source_lang, target_lang = _parse_message(update.message.text)
    except ValueError as e:
        await update.message.reply_text(str(e))
        return

    payload = {
        "input_text": text,
        "source_lang": source_lang,
        "target_lang": target_lang,
    }
    headers = {"X-User-Id": API_USER_ID, "Accept": "application/json"}

    try:
        async with httpx.AsyncClient(timeout=20.0, follow_redirects=True) as client:
            resp = await client.post(API_URL, json=payload, headers=headers)

        if resp.status_code == 200:
            data = resp.json()
            translated = data.get("output_text") or "<–Ω–µ—Ç –ø–µ—Ä–µ–≤–æ–¥–∞>"
            cost = data.get("cost")
            if cost is not None:
                await update.message.reply_text(f"–ü–µ—Ä–µ–≤–æ–¥: {translated}\n–°–ø–∏—Å–∞–Ω–æ: {cost}")
            else:
                await update.message.reply_text(f"–ü–µ—Ä–µ–≤–æ–¥: {translated}")
        else:
            detail = None
            try:
                detail = resp.json().get("detail")
            except Exception:
                detail = resp.text if hasattr(resp, "text") else None
            msg = f"–û—à–∏–±–∫–∞ API: {resp.status_code}"
            if detail:
                msg += f"\n{detail}"
            await update.message.reply_text(msg)

    except httpx.RequestError as e:
        logger.exception("HTTP error")
        await update.message.reply_text(f"–°–µ—Ç—å/HTTP –æ—à–∏–±–∫–∞: {e}")
    except Exception as e:
        logger.exception("Unexpected error")
        await update.message.reply_text(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")


async def cmd_balance(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not API_BASE:
        await update.message.reply_text("–ù–µ –∑–∞–¥–∞–Ω API_BASE –≤ .env (–ø—Ä–∏–º–µ—Ä: http://127.0.0.1:8080)")
        return
    try:
        data = await _api_get("/wallet/balance")
        bal = data.get("balance", "‚Äî")
        await update.message.reply_text(f"üí∞ –ë–∞–ª–∞–Ω—Å: {bal}")
    except Exception as e:
        logger.exception("balance")
        await update.message.reply_text(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –±–∞–ª–∞–Ω—Å. {e}")


async def cmd_transactions(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not API_BASE:
        await update.message.reply_text("–ù–µ –∑–∞–¥–∞–Ω API_BASE –≤ .env")
        return
    try:
        # /transactions [N]
        limit = 10
        if context.args and context.args[0].isdigit():
            limit = max(1, min(50, int(context.args[0])))
        items = await _api_get("/history/transactions", params={"limit": limit})
        if not items:
            await update.message.reply_text("–ò—Å—Ç–æ—Ä–∏—è –æ–ø–µ—Ä–∞—Ü–∏–π –ø—É—Å—Ç–∞.")
            return
        lines = []
        for i, t in enumerate(items, 1):
            ts = t.get("timestamp") or t.get("created_at") or ""
            lines.append(f"{i}. {ts} ‚Ä¢ {_map_tx_type(t.get('type'))} ‚Ä¢ {t.get('amount')}")
        txt = "üìí –ü–æ—Å–ª–µ–¥–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏:\n" + "\n".join(lines)
        await update.message.reply_text(txt)
    except Exception as e:
        logger.exception("transactions")
        await update.message.reply_text(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é –æ–ø–µ—Ä–∞—Ü–∏–π. {e}")


async def cmd_topup(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not API_BASE:
        await update.message.reply_text("–ù–µ –∑–∞–¥–∞–Ω API_BASE –≤ .env")
        return
    if not context.args:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /topup 100")
        return
    try:
        amt = int(context.args[0])
        if amt <= 0:
            raise ValueError()
    except ValueError:
        await update.message.reply_text("–°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —Ü–µ–ª—ã–º —á–∏—Å–ª–æ–º.")
        return

    try:
        await _api_post("/wallet/topup", {"amount": amt})
        data = await _api_get("/wallet/balance")
        await update.message.reply_text(f"‚úÖ –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ {amt} –≤—ã–ø–æ–ª–Ω–µ–Ω–æ.\n–¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {data.get('balance', '‚Äî')}")
    except Exception as e:
        logger.exception("topup")
        await update.message.reply_text(f"–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ. {e}")


def main():
    if not TOKEN:
        raise RuntimeError("–ù–µ –∑–∞–¥–∞–Ω TELEGRAM_TOKEN –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è.")

    app = ApplicationBuilder().token(TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("help", help_cmd))
    app.add_handler(CommandHandler("balance", cmd_balance))
    app.add_handler(CommandHandler("transactions", cmd_transactions))
    app.add_handler(CommandHandler("topup", cmd_topup))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, translate_text))

    app.run_polling()


if __name__ == "__main__":
    main()
