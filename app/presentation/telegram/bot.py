# app/presentation/telegram/bot.py
"""
Telegram-–±–æ—Ç –¥–ª—è ML —Å–µ—Ä–≤–∏—Å–∞ –ø–µ—Ä–µ–≤–æ–¥–∞ EN‚ÜîFR.

–ò–∑–º–µ–Ω–µ–Ω–∏—è:
- –ë–æ—Ç –∞–≤—Ç–æ—Ä–∏–∑—É–µ—Ç—Å—è –≤ API –ø–æ —Å–µ—Ä–≤–∏—Å–Ω–æ–π —É—á—ë—Ç–∫–µ (JWT) –∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –µ—ë –¥–ª—è –≤—Å–µ—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
  (–ø–µ—Ä–µ–≤–æ–¥, –±–∞–ª–∞–Ω—Å, –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ, –∏—Å—Ç–æ—Ä–∏—è).
- –°–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –ø–µ—Ä–µ–≤–æ–¥: POST /translate
- –û—á–µ—Ä–µ–¥—å: POST /translate/queue –∏ GET /translate/queue/{task_id}
- –ë–∞–ª–∞–Ω—Å: GET /wallet/
- –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ: POST /wallet/topup
- –ò—Å—Ç–æ—Ä–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: GET /history/transactions

–§–æ—Ä–º–∞—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞:
    <—Ç–µ–∫—Å—Ç> | <source> | <target>
–ü—Ä–∏–º–µ—Ä:
    Hello world | en | fr
"""

import os
import logging
from typing import Tuple, Optional
from app.infrastructure.db.models.transaction import Transaction, TransactionType
import httpx
from telegram import Update
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    filters,
    ContextTypes,
)
from dotenv import load_dotenv

load_dotenv()

# --- Telegram ---
TOKEN = os.getenv("TELEGRAM_TOKEN")

# --- –ë—ç–∫–µ–Ω–¥ API (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ) ---
API_BASE = os.getenv("API_BASE", "").strip()  # –Ω–∞–ø—Ä–∏–º–µ—Ä: http://127.0.0.1:8080
API_EMAIL = os.getenv("API_EMAIL", "").strip()  # —Å–µ—Ä–≤–∏—Å–Ω–∞—è —É—á—ë—Ç–∫–∞
API_PASSWORD = os.getenv("API_PASSWORD", "").strip()
API_TIMEOUT = float(os.getenv("API_TIMEOUT", "20.0"))

# –°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å–æ —Å—Ç–∞—Ä—ã–º API_URL (–µ—Å–ª–∏ –∑–∞–¥–∞–Ω) ‚Äî –≤—ã—Ç–∞—â–∏–º –∏–∑ –Ω–µ–≥–æ –±–∞–∑—É
API_URL_LEGACY = os.getenv("API_URL", "").strip()
if not API_BASE and API_URL_LEGACY:
    # –ü—Ä–µ–≤—Ä–∞—Ç–∏—Ç—å ".../translate" –≤ –±–∞–∑—É "...":
    if "/translate" in API_URL_LEGACY:
        API_BASE = API_URL_LEGACY.split("/translate")[0].rstrip("/")
    else:
        API_BASE = API_URL_LEGACY.rstrip("/")

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger("tg-bot")

# –ö—ç—à JWT —Ç–æ–∫–µ–Ω–∞
_access_token: Optional[str] = None


# -------------------- helpers --------------------


def _parse_message(text: str) -> Tuple[str, str, str]:
    """
    –û–∂–∏–¥–∞–µ–º —Ñ–æ—Ä–º–∞—Ç: "—Ç–µ–∫—Å—Ç | source | target"
    –í–æ–∑–≤—Ä–∞—â–∞–µ–º: (text, source, target) –∏–ª–∏ –±—Ä–æ—Å–∞–µ–º ValueError.
    """
    parts = [p.strip() for p in text.split("|")]
    if len(parts) != 3:
        raise ValueError("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü—Ä–∏–º–µ—Ä: Hello world | en | fr")
    msg, src, tgt = parts
    if not msg or not src or not tgt:
        raise ValueError("–ü—É—Å—Ç—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã. –ü—Ä–∏–º–µ—Ä: Hello world | en | fr")
    return msg, src.lower(), tgt.lower()


def _map_tx_type(t: Optional[str]) -> str:
    t = (t or "").lower()
    if t in ("topup", "–ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ"):
        return "–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ"
    if t in ("debit", "—Å–ø–∏—Å–∞–Ω–∏–µ"):
        return "–°–ø–∏—Å–∞–Ω–∏–µ"
    return t or "‚Äî"


async def _ensure_token() -> str:
    """
    –õ–æ–≥–∏–Ω–∏—Ç—Å—è –ø–æ —Å–µ—Ä–≤–∏—Å–Ω–æ–π —É—á—ë—Ç–∫–µ –∏ –∫—ç—à–∏—Ä—É–µ—Ç JWT. –ü—Ä–∏ 401 –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø–æ–≤—Ç–æ—Ä–Ω–æ.
    """
    global _access_token
    if _access_token:
        return _access_token

    if not (API_BASE and API_EMAIL and API_PASSWORD):
        raise RuntimeError("–ù—É–∂–Ω—ã API_BASE, API_EMAIL –∏ API_PASSWORD (—Å–º. .env)")

    async with httpx.AsyncClient(base_url=API_BASE, timeout=API_TIMEOUT) as client:
        resp = await client.post("/auth/login", json={"email": API_EMAIL, "password": API_PASSWORD})
        if resp.status_code != 200:
            raise RuntimeError(f"–ù–µ —É–¥–∞–ª–æ—Å—å –≤–æ–π—Ç–∏ —Å–µ—Ä–≤–∏—Å–Ω–æ–π —É—á—ë—Ç–∫–æ–π: {resp.status_code} {resp.text}")
        data = resp.json()
        token = data.get("access_token")
        if not token:
            raise RuntimeError("–í –æ—Ç–≤–µ—Ç–µ /auth/login –Ω–µ—Ç access_token")
        _access_token = token
        return token


async def _api_get(path: str, params: dict | None = None) -> dict:
    token = await _ensure_token()
    headers = {"Authorization": f"Bearer {token}"}
    async with httpx.AsyncClient(base_url=API_BASE, timeout=API_TIMEOUT, headers=headers) as client:
        resp = await client.get(path, params=params)
        if resp.status_code == 401:
            # –ø–æ–≤—Ç–æ—Ä–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∏ –ø–æ–≤—Ç–æ—Ä –∑–∞–ø—Ä–æ—Å–∞
            global _access_token
            _access_token = None
            token = await _ensure_token()
            headers["Authorization"] = f"Bearer {token}"
            resp = await client.get(path, params=params, headers=headers)
        resp.raise_for_status()
        return resp.json()


async def _api_post(path: str, payload: dict) -> dict:
    token = await _ensure_token()
    headers = {"Authorization": f"Bearer {token}"}
    async with httpx.AsyncClient(base_url=API_BASE, timeout=API_TIMEOUT, headers=headers) as client:
        resp = await client.post(path, json=payload)
        if resp.status_code == 401:
            global _access_token
            _access_token = None
            token = await _ensure_token()
            headers["Authorization"] = f"Bearer {token}"
            resp = await client.post(path, json=payload, headers=headers)
        # –î–ª—è 402 (–Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤) –Ω–µ –ø–æ–¥–Ω–∏–º–∞–µ–º –∏—Å–∫–ª—é—á–µ–Ω–∏–µ ‚Äî –æ–±—Ä–∞–±–æ—Ç–∞–µ–º –≤—ã—à–µ
        if resp.status_code == 402:
            return {"__status__": 402, "__detail__": (resp.json().get("detail") if resp.headers.get("content-type","").startswith("application/json") else resp.text)}
        resp.raise_for_status()
        return resp.json()


# -------------------- –ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞ --------------------


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    txt = (
        "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –ø–µ—Ä–µ–≤–æ–¥–∞ EN‚ÜîFR.\n\n"
        "–û—Ç–ø—Ä–∞–≤—å —Ç–µ–∫—Å—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
        "  <—Ç–µ–∫—Å—Ç> | <source> | <target>\n"
        "–ü—Ä–∏–º–µ—Ä:  Hello world | en | fr\n\n"
        "–ö–æ–º–∞–Ω–¥—ã –∫–æ—à–µ–ª—å–∫–∞:\n"
        "  /balance ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å –±–∞–ª–∞–Ω—Å\n"
        "  /transactions [N] ‚Äî –ø–æ—Å–ª–µ–¥–Ω–∏–µ N –æ–ø–µ—Ä–∞—Ü–∏–π (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 10)\n"
        "  /topup <amount> ‚Äî –ø–æ–ø–æ–ª–Ω–∏—Ç—å –Ω–∞ —Å—É–º–º—É (—Ü–µ–ª–æ–µ —á–∏—Å–ª–æ)\n\n"
        "–û—á–µ—Ä–µ–¥—å –∑–∞–¥–∞—á:\n"
        "  /queue <—Ç–µ–∫—Å—Ç | src | tgt> ‚Äî –ø–æ–ª–æ–∂–∏—Ç—å –≤ –æ—á–µ—Ä–µ–¥—å\n"
        "  /status <task_id> ‚Äî —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏\n"
    )
    await update.message.reply_text(txt)


async def help_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await start(update, context)


async def translate_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        text, source_lang, target_lang = _parse_message(update.message.text)
    except ValueError as e:
        await update.message.reply_text(str(e)); return

    payload = {"input_text": text, "source_lang": source_lang, "target_lang": target_lang}
    try:
        data = await _api_post("/translate", payload)   # <-- –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–∫–µ–Ω –∏–∑ _ensure_token()
        translated = data.get("output_text") or "<–Ω–µ—Ç –ø–µ—Ä–µ–≤–æ–¥–∞>"
        cost = data.get("cost")
        msg = f"–ü–µ—Ä–µ–≤–æ–¥: {translated}" + (f"\n–°–ø–∏—Å–∞–Ω–æ: {cost}" if cost is not None else "")
        await update.message.reply_text(msg)
    except Exception as e:
        await update.message.reply_text(f"–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –ø–µ—Ä–µ–≤–æ–¥. {e}")


async def cmd_queue(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –ü–æ—Å—Ç–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É –≤ –æ—á–µ—Ä–µ–¥—å: /queue Hello | en | fr
    """
    if not API_BASE:
        await update.message.reply_text("–ù–µ –∑–∞–¥–∞–Ω API_BASE –≤ .env")
        return

    raw = " ".join(context.args) if context.args else ""
    if not raw:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /queue Hello | en | fr")
        return

    try:
        text, source_lang, target_lang = _parse_message(raw)
    except ValueError as e:
        await update.message.reply_text(str(e))
        return

    payload = {"input_text": text, "source_lang": source_lang, "target_lang": target_lang}
    try:
        data = await _api_post("/translate/queue", payload)
        task_id = data.get("task_id")
        if not task_id:
            await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å task_id.")
            return
        await update.message.reply_text(
            f"üßæ –ó–∞–¥–∞—á–∞ –ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∞ –≤ –æ—á–µ—Ä–µ–¥—å.\n"
            f"task_id: `{task_id}`\n"
            f"–ü—Ä–æ–≤–µ—Ä—å —Å—Ç–∞—Ç—É—Å: /status {task_id}",
            parse_mode="Markdown",
        )
    except Exception as e:
        logger.exception("queue")
        await update.message.reply_text(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ—Å—Ç–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É. {e}")


async def cmd_status(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏: /status <task_id>
    """
    if not API_BASE:
        await update.message.reply_text("–ù–µ –∑–∞–¥–∞–Ω API_BASE –≤ .env")
        return
    if not context.args:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /status <task_id>")
        return
    task_id = context.args[0]

    try:
        data = await _api_get(f"/translate/queue/{task_id}")
        status_ = data.get("status")
        if status_ == "pending":
            await update.message.reply_text("‚è≥ –ó–∞–¥–∞—á–∞ –µ—â—ë –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ...")
        elif status_ == "done":
            out = data.get("output_text") or "<–Ω–µ—Ç –ø–µ—Ä–µ–≤–æ–¥–∞>"
            cost = data.get("cost")
            if cost is not None:
                await update.message.reply_text(f"–ì–æ—Ç–æ–≤–æ: {out}\n–°–ø–∏—Å–∞–Ω–æ: {cost}")
            else:
                await update.message.reply_text(f"–ì–æ—Ç–æ–≤–æ: {out}")
        else:
            await update.message.reply_text(f"–°—Ç–∞—Ç—É—Å: {status_ or '‚Äî'}")
    except Exception as e:
        logger.exception("status")
        await update.message.reply_text(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å. {e}")


async def cmd_balance(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not API_BASE:
        await update.message.reply_text("–ù–µ –∑–∞–¥–∞–Ω API_BASE –≤ .env (–ø—Ä–∏–º–µ—Ä: http://127.0.0.1:8080)")
        return
    try:
        data = await _api_get("/wallet/")
        bal = data.get("balance", "‚Äî")
        await update.message.reply_text(f"üí∞ –ë–∞–ª–∞–Ω—Å: {bal}")
    except Exception as e:
        logger.exception("balance")
        await update.message.reply_text(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –±–∞–ª–∞–Ω—Å. {e}")


async def cmd_transactions(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not API_BASE:
        await update.message.reply_text("–ù–µ –∑–∞–¥–∞–Ω API_BASE –≤ .env")
        return
    try:
        # /transactions [N]
        limit = 10
        if context.args and context.args[0].isdigit():
            limit = max(1, min(50, int(context.args[0])))
        items = await _api_get("/history/transactions", params={"limit": limit})
        if not items:
            await update.message.reply_text("–ò—Å—Ç–æ—Ä–∏—è –æ–ø–µ—Ä–∞—Ü–∏–π –ø—É—Å—Ç–∞.")
            return
        lines = []
        for i, t in enumerate(items, 1):
            ts = t.get("timestamp") or t.get("created_at") or ""
            lines.append(f"{i}. {ts} ‚Ä¢ {_map_tx_type(t.get('type'))} ‚Ä¢ {t.get('amount')}")
        txt = "üìí –ü–æ—Å–ª–µ–¥–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏:\n" + "\n".join(lines)
        await update.message.reply_text(txt)
    except Exception as e:
        logger.exception("transactions")
        await update.message.reply_text(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é –æ–ø–µ—Ä–∞—Ü–∏–π. {e}")


async def cmd_topup(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not API_BASE:
        await update.message.reply_text("–ù–µ –∑–∞–¥–∞–Ω API_BASE –≤ .env")
        return
    if not context.args:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /topup 100")
        return
    try:
        amt = int(context.args[0])
        if amt <= 0:
            raise ValueError()
    except ValueError:
        await update.message.reply_text("–°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —Ü–µ–ª—ã–º —á–∏—Å–ª–æ–º.")
        return

    try:
        await _api_post("/wallet/topup", {"amount": amt})
        data = await _api_get("/wallet/")
        await update.message.reply_text(f"‚úÖ –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ {amt} –≤—ã–ø–æ–ª–Ω–µ–Ω–æ.\n–¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {data.get('balance', '‚Äî')}")
    except Exception as e:
        logger.exception("topup")
        await update.message.reply_text(f"–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ. {e}")


def main():
    if not TOKEN:
        raise RuntimeError("–ù–µ –∑–∞–¥–∞–Ω TELEGRAM_TOKEN –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è.")
    if not API_BASE:
        raise RuntimeError("–ù–µ –∑–∞–¥–∞–Ω API_BASE –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è.")
    if not (API_EMAIL and API_PASSWORD):
        raise RuntimeError("–ù—É–∂–Ω—ã API_EMAIL –∏ API_PASSWORD (—Å–µ—Ä–≤–∏—Å–Ω–∞—è —É—á—ë—Ç–∫–∞ –¥–ª—è JWT).")

    app = ApplicationBuilder().token(TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("help", help_cmd))
    app.add_handler(CommandHandler("balance", cmd_balance))
    app.add_handler(CommandHandler("transactions", cmd_transactions))
    app.add_handler(CommandHandler("topup", cmd_topup))
    app.add_handler(CommandHandler("queue", cmd_queue))
    app.add_handler(CommandHandler("status", cmd_status))

    # –õ—é–±–æ–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–µ–∑ –∫–æ–º–∞–Ω–¥—ã ‚Äî —Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –ø–µ—Ä–µ–≤–æ–¥
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, translate_text))

    app.run_polling()


if __name__ == "__main__":
    main()
